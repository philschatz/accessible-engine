<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
  <style>
    #my_canvas { width: 100%; max-width: 800px !important; }
    #my_table table { border-spacing: 0; }
    #my_table table caption { font-weight: bold; }
    #my_table table td { border: 1px solid black; }
    #my_table table td .player { font-weight: bold; }
    #my_audio { height: 10rem; overflow: scroll; list-style-type: none; }
    #my_audio > *:last-child { font-weight: bold; }

    .hidden-for-all { display: none; }
    .hidden-visually { 
      position: absolute;
      left: -10000px;
      top: auto;
      width: 1px;
      height: 1px;
      overflow: hidden;
    }

    kbd {
      font: 11px "SFMono-Regular",Consolas,"Liberation Mono",Menlo,Courier,monospace;
      display: inline-block;
      padding: 3px 5px;
      font-size: 11px;
      line-height: 10px;
      color: #444d56;
      vertical-align: middle;
      background-color: #fafbfc;
      border: solid 1px #c6cbd1;
      border-bottom-color: #959da5;
      border-radius: 3px;
      box-shadow: inset 0 -1px 0 #959da5;
    }
  </style>
</head>

<body>
  <fieldset aria-hidden="true">
    <legend>How would you like to play the game?</legend>
    <input id="play_sprites" type="radio" name="play_style" value="visually" checked="checked"/>
    <label for="play_sprites">Visually with Sprites</label><br/>
    <input id="play_table" type="radio" name="play_style" value="table" aria-hidden="true"/>
    <label for="play_table">In a Table (to roughly show what the mental model of the level "looks like" to an unsighted player)</label><br/>
    <input id="play_screenreader" type="radio" name="play_style" value="screenreader"/>
    <label for="play_screenreader">Using <strong>only</strong> the text read out by a screenreader</label><br/>
    <p><strong tabindex="0" aria-controls="my_audio_messages">How to use this</strong> . This is an <a href="https://github.com/philschatz/accessible-engine">accessbile demo</a> of the <a href="https://www.akurra-game.com" target="_window">amazing game Akurra</a>. Try completing the level without using the graphical option. Note what happens when you push against a wall, or when you get/use a key. Creating a sokoban-style games to be accessible only requires a minimal amount of accessible hoops to jump through; game devs can just write game code for the most part. For more on how to build accessible videogames check out <a href="https://github.com/philschatz/accessible-engine">the repository</a>.</p>
  </fieldset>
  <p>Use the <kbd>I</kbd>, <kbd>J</kbd>, <kbd>K</kbd>, <kbd>L</kbd> keys to inspect around you.</p>
  <p>Press <kbd>M</kbd> to hear where items are located.</p>
  <p>Use the arrow keys or <kbd>W</kbd>, <kbd>A</kbd>, <kbd>S</kbd>, <kbd>D</kbd> keys to move the player. This requires a keyboard for now but phone/tablet support is coming soon.</p>
  <canvas tabindex="0" id="my_canvas" width="384" height="224" aria-hidden="true" alt="graphical version of the game"></canvas>
  <div id="my_table" aria-hidden="true"></div>
  <ol id="my_audio" role="log" aria-live="polite" aria-atomic="false">
    <li style="position:absolute; left: -10000px;">Use the <kbd>I</kbd>, <kbd>J</kbd>, <kbd>K</kbd>, <kbd>L</kbd> keys to inspect around you. Press <kbd>M</kbd> to hear where items are located. Use the arrow keys or <kbd>W</kbd>, <kbd>A</kbd>, <kbd>S</kbd>, <kbd>D</kbd> keys to move the player.</li>
  </ol>

  <div id="gamepad_connected">ðŸŽ® Gamepad is connected. Use the D-Pad to move around</div>
  <div id="gamepad_disconnected"><strong>Tip:</strong> ðŸŽ® Plug in an XBox or PS3/4 Controller to play using it</div>
  <script src="browser.bundle.js"></script>

  <script>
    (function() {
      console.log(window.GameEngine)
      const {MyGame, AndOutputter, AudioOutputter, CanvasRenderer, Engine, GridTableOutputter, OrGamepad, VisualOutputter, KeyGamepad, BrowserGamepad, GridInspector } = window.GameEngine

      const myCanvas = document.querySelector('#my_canvas')
      const myTable = document.querySelector('#my_table')
      const myAudio = document.querySelector('#my_audio')
      const gamepadConnected = document.querySelector('#gamepad_connected')
      const gamepadDisconnected = document.querySelector('#gamepad_disconnected')

      const logger = (msg) => {
        // remove all but the last 2 messages (might still be reading them out)
        const old = [...myAudio.querySelectorAll('li')]
        const toRemove = old.slice(0, old.length - 10)
        toRemove.forEach(el => el.remove())

        const line = document.createElement('li')
        line.innerHTML = msg
        myAudio.appendChild(line)
        myAudio.scrollTop = myAudio.scrollHeight
      }

      const audioOut = new AudioOutputter(logger)
      const visualOut = new VisualOutputter(new CanvasRenderer(myCanvas, 1))
      const tableOut = new GridTableOutputter(myTable)
      const allOutputters = new AndOutputter([
        audioOut, 
        visualOut, 
        tableOut
      ])
      const browserGamepad = new BrowserGamepad()
      const inputter = new OrGamepad([new KeyGamepad(), browserGamepad])
      const engine = new Engine(new MyGame(), allOutputters, inputter)

      const gridInspector = new GridInspector(myTable, logger)

      const fn = () => {
        engine.tick()
        showHideGamespadStatus()
        window.requestAnimationFrame(fn)
      }
      fn()

      // Show/Hide the games based on the checkboxes
      const playSprites = document.querySelector('#play_sprites')
      const playTable = document.querySelector('#play_table')
      const playScreenreader = document.querySelector('#play_screenreader')
      
      const allHandlers = new Set()
      function allHandler() {
        allHandlers.forEach(h => h())
      }
      function toggle(checkbox, renderer, outputter, alwaysVisible) {
        const fn = () => {
          if (checkbox.checked) {
            renderer.classList.remove('hidden-visually')
            allOutputters.outs.add(outputter)
          } else if (!alwaysVisible) {
            renderer.classList.add('hidden-visually')
            if (outputter !== tableOut) { // We need tableOut for the Grid Inspector
              allOutputters.outs.delete(outputter)
            }
          }
          // in case we enabled the logger, scroll to the bottom
          renderer.scrollTop = renderer.scrollHeight
        }
        checkbox.addEventListener('change', allHandler)
        allHandlers.add(fn)
        fn()
      }
      toggle(playSprites, myCanvas, visualOut)
      toggle(playTable, myTable, tableOut)
      toggle(playScreenreader, myAudio, audioOut, true)

      function showHideGamespadStatus() {
        const c = browserGamepad.isConnected()
        gamepadConnected.style.display = c ? '' : 'none'
        gamepadDisconnected.style.display = c ? 'none' : ''
      }

    })()
  </script>

  <script type="text/javascript">//<![CDATA[
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-48498113-4', 'philschatz.com');
  // ]]></script>

</body>
</html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

<head>
  <style>
    #my_canvas { width: 100%; max-width: 800px !important; }
    #my_table table { border-spacing: 0; }
    #my_table table caption { font-weight: bold; }
    #my_table table td { border: 1px solid black; }
    #my_table table td .player { font-weight: bold; }
    #my_audio { height: 10rem; overflow: scroll; list-style-type: none; }
    #my_audio > *:last-child { font-weight: bold; }

    .hidden-for-all { display: none; }
    .hidden-visually { 
      position: absolute;
      left: -10000px;
      top: auto;
      width: 1px;
      height: 1px;
      overflow: hidden;
    }
  </style>
</head>

<body>
  <fieldset>
    <legend>Which ways would you like to play the game? Check one or more:</legend>
    <input id="play_sprites" type="checkbox" name="play_style" value="visually" checked="checked"/>
    <label for="play_sprites">Visually with Sprites</label><br/>
    <input id="play_table" type="checkbox" name="play_style" value="table"/>
    <label for="play_table">In an Accessible Table (for low vision users or blind people that enjoy navigating in tables)</label><br/>
    <input id="play_screenreader" type="checkbox" name="play_style" value="screenreader" checked="checked"/>
    <label for="play_screenreader">Using Audio read by a screenreader</label><br/>
    <p><strong tabindex="0" aria-controls="my_audio_messages">How to use this</strong> . Try completing the level without using the graphical option. Note what happens when you push against a wall, or when you get/use a key. Creating a sokoban-style games to be accessible only requires a minimal amount of accessible hoops to jump through; game devs can just write game code for the most part. For more on how to build accessible videogames check out the repository.</p>
  </fieldset>
  <canvas tabindex="0" id="my_canvas" width="384" height="224"></canvas>
  <div id="my_table"></div>
  <ol id="my_audio" role="log" aria-live="polite" aria-atomic="false">
  </ol>
  <script src="browser.bundle.js"></script>

  <script>
    (function() {
      console.log(window.GameEngine)
      const {MyGame, AndOutputter, AudioOutputter, CanvasRenderer, Engine, GridTableOutputter, OrGamepad, VisualOutputter, KeyGamepad } = window.GameEngine

      const myCanvas = document.querySelector('#my_canvas')
      const myTable = document.querySelector('#my_table')
      const myAudio = document.querySelector('#my_audio')

      const logger = (msg) => {
        // remove all but the last 2 messages (might still be reading them out)
        const old = [...myAudio.querySelectorAll('li')]
        const toRemove = old.slice(0, old.length - 10)
        toRemove.forEach(el => el.remove())

        const line = document.createElement('li')
        line.innerHTML = msg
        myAudio.appendChild(line)
        myAudio.scrollTop = myAudio.scrollHeight
      }

      const audioOut = new AudioOutputter(logger)
      const visualOut = new VisualOutputter(new CanvasRenderer(myCanvas, 1))
      const tableOut = new GridTableOutputter(myTable)
      const allOutputters = new AndOutputter([
        audioOut, 
        visualOut, 
        tableOut
      ])
      const inputter = new KeyGamepad() // new OrGamepad([new KeyGamepad()])
      const engine = new Engine(new MyGame(), allOutputters, inputter)

      const fn = () => {
        engine.tick()
        window.requestAnimationFrame(fn)
      }
      fn()

      // Show/Hide the games based on the checkboxes
      const playSprites = document.querySelector('#play_sprites')
      const playTable = document.querySelector('#play_table')
      const playScreenreader = document.querySelector('#play_screenreader')
      
      function toggle(checkbox, renderer, outputter) {
        const fn = () => {
          if (checkbox.checked) {
            renderer.classList.remove('hidden-visually')
            allOutputters.outs.add(outputter)
          } else {
            renderer.classList.add('hidden-visually')
            allOutputters.outs.delete(outputter)
          }
          // in case we enabled the logger, scroll to the bottom
          renderer.scrollTop = renderer.scrollHeight
        }
        checkbox.addEventListener('change', fn)
        fn()
      }
      toggle(playSprites, myCanvas, visualOut)
      toggle(playTable, myTable, tableOut)
      toggle(playScreenreader, myAudio, audioOut)

    })()
  </script>
</body>
</html>